{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\syho0\\OneDrive\\Desktop\\Code\\capstone_project_app\\node_modules\\react-native-qrcode-styled\\src\\types.ts"],"sourcesContent":["import type React from 'react';\nimport type { ColorValue } from 'react-native';\nimport type { PathProps, ImageProps as SVGImageProps } from 'react-native-svg';\n\nexport type GradientOrigin = [number, number];\n\nexport type GradientType = 'linear' | 'radial'; // default 'linear'\n\nexport type LinearGradientProps = {\n  colors?: ColorValue[];\n  start?: [number, number]; // start point [x, y] (0 -> 0%, 1 -> 100%)\n  end?: [number, number]; // end point [x, y] (0 -> 0%, 1 -> 100%)\n  locations?: number[]; // list of colors positions (0 -> 0%, 1 -> 100%)\n};\n\nexport type RadialGradientProps = {\n  colors?: ColorValue[];\n  center?: [number, number]; // center point [x, y] (0 -> 0%, 1 -> 100%)\n  radius?: [number, number]; // radiusXY [x, y] (0 -> 0%, 1 -> 100%)\n  locations?: number[]; // list of colors positions (0 -> 0%, 1 -> 100%)\n};\n\nexport type GradientProps = {\n  type?: GradientType;\n  options?: LinearGradientProps | RadialGradientProps;\n};\n\nexport type CornerType = 'rounded' | 'cut'; // default 'rounded'\n\nexport type BorderRadius = number | number[];\n\nexport type Bit = 0 | 1;\n\nexport type BitArray = Bit[];\n\nexport type BitMatrix = BitArray[];\n\nexport type PieceOptions = {\n  pieceSize?: number;\n  pieceScale?: PathProps['scale']; // scaleXY | [scaleX, scaleY]\n  pieceRotation?: string | number;\n  pieceCornerType?: CornerType;\n  pieceBorderRadius?: BorderRadius;\n  pieceStroke?: ColorValue;\n  pieceStrokeWidth?: number;\n  color?: ColorValue;\n  gradient?: GradientProps;\n};\n\nexport type EyePosition = 'topLeft' | 'topRight' | 'bottomLeft';\n\nexport type EyeOptions = {\n  scale?: PathProps['scale']; // scaleXY | [scaleX, scaleY]\n  rotation?: string | number;\n  borderRadius?: BorderRadius;\n  color?: ColorValue;\n  gradient?: GradientProps;\n  stroke?: ColorValue;\n  strokeWidth?: number;\n};\n\nexport type AllEyesOptions = { [K in EyePosition]?: EyeOptions };\n\nexport type RenderCustomPieceItem = ({\n  x,\n  y,\n  pieceSize,\n  qrSize,\n  bitMatrix,\n}: {\n  x: number;\n  y: number;\n  pieceSize: number;\n  qrSize: number;\n  bitMatrix: BitMatrix;\n}) => React.ReactElement | null;\n\nexport type LogoArea = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport type LogoOptions = {\n  hidePieces?: boolean;\n  padding?: number;\n  scale?: number;\n  onChange?: (logoArea?: LogoArea) => void;\n} & SVGImageProps;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}